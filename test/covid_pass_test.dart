import 'package:nz_covid_pass_reader/covid_pass.dart';
import 'package:nz_covid_pass_reader/exceptions.dart';
import 'package:test/test.dart';

void main() {
  test('Holder information is returned from a valid COVID Pass', () async {
    const code
    final pass = await CovidPass.parse(code, allowTestIssuers: true);
    expect(pass.givenName, "Jack");
    expect(pass.familyName, "Sparrow");
    expect(pass.dob, DateTime(1960, 4, 16));
  });

  test('A bad public key causes an exception', () {
    const code
    expect(CovidPass.parse(code, allowTestIssuers: true), throwsA(isA<CoseException>()));
  });

  test('A public key not being found causes an exception', () {
    const code
    expect(CovidPass.parse(code, allowTestIssuers: true), throwsA(isA<CovidPassException>()));
  });

  test('The signature being modified causes an exception', () {
    const code
    expect(CovidPass.parse(code, allowTestIssuers: true), throwsA(isA<CoseException>()));
  });

  test('The payload being modified causes an exception', () {
    const code
    expect(CovidPass.parse(code, allowTestIssuers: true), throwsA(isA<CoseException>()));
  });

  test('The pass being expired causes an exception', () {
    const code = "NZCP:/1/2KCEVIQEIVVWK6JNGEASNICZAEP2KALYDZSGSZB2O5SWEOTOPJRXALTDN53GSZBRHEXGQZLBNR2GQLTOPICRUX5AM2FQIGTBPBPYWYTWMOSGQQDDN5XHIZLYOSBHQJTIOR2HA4Z2F4XXO53XFZ3TGLTPOJTS6MRQGE4C6Y3SMVSGK3TUNFQWY4ZPOYYXQKTIOR2HA4Z2F4XW46TDOAXGG33WNFSDCOJONBSWC3DUNAXG46RPMNXW45DFPB2HGL3WGFTXMZLSONUW63TFGEXDALRQMR2HS4DFQJ2FMZLSNFTGSYLCNRSUG4TFMRSW45DJMFWG6UDVMJWGSY2DN53GSZCQMFZXG4LDOJSWIZLOORUWC3CTOVRGUZLDOSRWSZ3JOZSW4TTBNVSWISTBMNVWUZTBNVUWY6KOMFWWKZ2TOBQXE4TPO5RWI33CNIYTSNRQFUYDILJRGYDVA56TNJCCUN2NVK5NGAYOZ6VIWACYIBM3QXW7SLCMD2WTJ3GSEI5JH7RXAEURGATOHAHXC2O6BEJKBSVI25ICTBR5SFYUDSVLB2F6SJ63LWJ6Z3FWNHOXF6A2QLJNUFRQNTRU";
    expect(CovidPass.parse(code, allowTestIssuers: true), throwsA(isA<CovidPassException>()));
  });

  test('The pass being not active causes an exception', () {
    const code
    expect(CovidPass.parse(code, allowTestIssuers: true), throwsA(isA<CovidPassException>()));
  });
}
